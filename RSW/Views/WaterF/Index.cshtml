@Html.Partial("MapPartial")
<link rel="stylesheet" href="~/Content/prj/sub/floodquery.css" />
<link rel="stylesheet" href="~/Content/prj/rthydro.css" />
@Html.Partial("_ArcgisMapPartial")
@Html.Partial("_ArcgisQpesums")
<div id="water-level-legend" style="position: absolute; bottom: 65px; right: 140px;padding: 0px; border: 3px solid rgba(255,255,255,0.4); background: rgba(250,250,250,0.9) ">
</div>
<script>
    
    const LAYER_ID = 'E-WARN';
    const MODEL_COLORSCALE = [
        { value: 0, color: "rgba(0,0,0,0)" },
        { value: 0.3, color: "rgba(50,50,144, 0.3)" },
        { value: 0.5, color: "rgba(50,50,144, 0.5)" },
        { value: 1, color: "rgba(50,50,144, 0.7)" },
        { value: 2, color: "rgba(50,50,144, 0.9)" },
        { value: 3, color: "rgba(50,50,144, 1)" }
    ];
    var last_t0;
    let chart;
    const manhole111 = {};
    const series_data = {};
    jQuery.getJSON('@Url.Content("~/Data/NCKU_OUTPUT/8040202.geojson")', data => Object.assign(manhole111, data));

    function hide_chart_popup() {
        profile_play_stop();
        $("#chart_popup").hide();
    }

    function profile_play_stop() {
        $("#stop").hide();
        $("#play").show();
    }

    function profile_play(btn_click) {
        if (btn_click) {
            $("#play").hide();
            $("#stop").show();
        } else {
            if ($("#play").is(":visible")) return;
        }
        const data = $("#chart1").data("tsv");
        const idx = $("#chart1").data("idx");
        if (idx + 1 == data.length) {
            $("#chart1").data("idx", 0);
            profile_play_stop();
        } else {
            $("#chart1").data("idx", idx + 1);
            set_profile_data();
            setTimeout(profile_play, 300);
        }
    }

    function set_profile_data() {
        const data = $("#chart1").data("tsv");
        const idx = $("#chart1").data("idx");
        chart.setSubtitle({
            text: `日期: ${data[idx]['Date']}  時間: ${data[idx]['Time']}`
        });
        const vals = chart.xAxis[0].categories.map((x, i) => {
            const node_id = x.split(';')[1];
            const bt = chart.series[0].data[i].y;
            const bt2 = chart.series[6].data[i].y;
            try {
                const wl = (data[idx][node_id] * 1.0) || 0;
                const wl0 = Number.isFinite(bt2) ? Math.min(wl, bt2) : wl;
                const ar = bt < wl0 ? [bt, wl0] : [wl0, wl0];
                if (wl > 0) {
                    return [wl, bt < 0 ? 0 : bt, ar];
                } else if (bt > wl) {
                    return [0, bt, ar];
                } else {
                    return [0, wl, ar];
                }
            } catch {
                return [0, 0, [bt, bt2]];
            }
        });
//        console.log(vals);
        chart.series[2].setData(vals.map(x => x[0]), false);
        chart.series[3].setData(vals.map(x => x[1]), false);
        chart.series[5].setData(vals.map(x => x[2]), false);
        chart.redraw(true);
    }

    function show_profile(feature) {
        const datafile = feature.graphic.attributes.key;
        const mh_pipe = series_data[datafile].mh_pipe;
        const xAxis = series_data[datafile].xAxis;
        const series = series_data[datafile].series;
        if (series[6].data.length == 0) {
            let xidx = 0;

            for (let c of xAxis.categories) {
                var m = c.split(';')[2]
                if (m && mh_pipe[m]) {
                    const p = mh_pipe[m];
                    const di = p.PipeHeight || p.PipeWidth || 0;
                    if (di) {
                        let d = 0;
                        if (p.BLE && p.BLE * 1.0) {
                            d = p.BLE * 1.0;
                        } else {
                            d = p.DEPTH || 0;
                        }
                        series[6].data.push(d + di);
                        series[7].data.push(d);
                        //                    console.log(m, d, series[0].data[xidx])
                        if (series[0].data[xidx] > d) {
                            series[0].data[xidx] = d;
                            if (d < 0) {
                                series[3].data[xidx] = d;
                                series[4].data[xidx] = 0;
                            } else {
                                series[3].data[xidx] = 0;
                                series[4].data[xidx] = d;
                            }
                        }
                        xidx++;
                        continue;
                    }
                }
                series[6].data.push(null);
                series[7].data.push(null);
                xidx++;
            }
        }
        d3.tsv('@Url.Content("~/Data/NCKU_OUTPUT/")' + datafile).then(data => {
            $("#chart1").data("tsv", data);
            $("#chart1").data("idx", 0);
            chart = Highcharts.chart("chart1", {
                chart: {
                    type: "column"
                },
                tooltip: {
                    enabled: false
                },
                title: { text: "下水道水位變化剖面 - " + feature.graphic.attributes.pipe },
                subtitle: {
                    text: `日期: ${data[0]['Date']}  時間: ${data[0]['Time']}`
                },
                legend: { enabled: false },
                plotOptions: {
                    column: {
                        pointPadding: 0.2,
                        borderWidth: 0,
                        grouping: false,
                    },
                    series: {
                        allowPointSelect: false,
                        states: {
                            hover: {
                                enabled: false
                            },
                            inactive: {
                                enabled: false
                            },
                            select: {
                                enabled: false
                            }
                        }
                    }
                },
                xAxis,
                yAxis: {
                    title: {
                        text: '高程 (M)'
                    }
                },
                colors: ["#4080ff", "#c0c0c0", "#4080ff", "#c0c0c0", "#ffffff", "#4080ff", "#c0c0c0", "#c0c0c0"],
                series
            });
            setTimeout(set_profile_data,200);
            $("#chart_popup").show();
        });
        return feature.graphic.attributes.title;
    }

    function getProfileData() {

        const label = {
            enabled: true,
            style: {
                color: '#00008F',
                textOutline: 'none'
            },
            formatter: function () {
                    if (this.y && this.series.chart.series[0].data[this.point.index]
                    && this.series.chart.series[2].data[this.point.index]
                    && this.series.chart.series[3].data[this.point.index]
                    && this.series.chart.series[5].data[this.point.index]) {
                        const b = this.series.chart.series[0].data[this.point.index].y;
                        const wl1 = this.series.chart.series[2].data[this.point.index].y || this.series.chart.series[3].data[this.point.index].y;
                        const ph = this.series.chart.series[5].data[this.point.index].high;
                        if (this.y > wl1) return;
                        return (b > ph) ? ph : wl1;
                }
            }
        };
        if (!arcgis_map.createFeatureLayer || !manhole111.features) {
            console.log('Waiting for arcgis ready');
            setTimeout(function () { getProfileData(); }, 1000);
        } else {
            var f0 = arcgis_map.createFeatureLayer({
                url: "https://water.tainan.gov.tw/tnwrbarcgis104/rest/services/TNRW/IISI_rainwater/MapServer/0"
            });
            var f1 = arcgis_map.createFeatureLayer({
                url: "https://water.tainan.gov.tw/tnwrbarcgis104/rest/services/TNRW/IISI_rainwater/MapServer/1"
            });
            $.get('@Url.Content("~/Data/NCKU_OUTPUT/profile.json")').then(json => {
                const old_result_layer = arcgis_map.map.findLayerById(LAYER_ID + '-PROFILE');
                if (old_result_layer) arcgis_map.map.remove(old_result_layer);
                const list = [];
                const promises = [];
                let ptr = 0;
                for (let p of Object.values(json)) {
                    const xAxis = {
                        categories: [],
                        labels: {
                            formatter: function () {
                                return this.value.split(';')[0];
                            }
                        }
                    };
                    const series = [
                        { name: "Bottom", data: [] },
                        { name: "Top", data: [] },
                        { name: "BLUE", data: [], dataLabels: label },
                        { name: "GRAY", data: [], dataLabels: label },
                        { name: "WHITE", data: [] },
                        {
                            name: "BLUE_AREA", data: [], type: 'arearange', marker: { enabled: false }
                        },
                        {
                            name: "PIPE_TOP", data: [], type: 'line', marker: { enabled: false }, connectNulls: true
                        },
                        {
                            name: "PIPE_BOTTOM", data: [], type: 'line', marker: { enabled: false }, connectNulls: true,
                        },
                    ];
                    function push_node(n, b, h) {
                        xAxis.categories.push(`${n.fid};${n.model_id};${n.MH_NUM}`);
                        series[0].data.push(b - h);
                        series[1].data.push(b);
                        if (b - h < 0) {
                            series[3].data.push(b - h);
                            series[4].data.push(0);
                        } else {
                            series[3].data.push(0);
                            series[4].data.push(b - h);
                        }
                        series[2].data.push(0);
                        series[5].data.push([b-h, 0]);
                    }
                    const fid_list = p.node.map(x => x.fid);
                    const q1 = f1.createQuery();
                    q1.where = "fid in (" + fid_list.join(',') + ")";
                    q1.returnGeometry = false;
                    q1.outFields = ["fid", "lon", "lat", "BaseHeight", "HoleDepth", "FacNum", "MH_NUM"];
                    promises.push(
                        f1.queryFeatures(q1).then(result => {
                            ptr++;
                            let paths = [
                                fid_list.map(i => {
                                    const n = p.node.find(x => x.fid == i);
                                    const y = result.features.find(x => x.attributes.FID == i);
                                    n.MH_NUM = y.attributes.MH_NUM;
                                    if (y.attributes.HoleDepth) {
                                        const b = y.attributes.BaseHeight;
                                        const h = y.attributes.HoleDepth;
                                        push_node(n, b, h);
                                    } else {
                                        const fnum = n.FacNum;
                                        if (fnum) {
                                            const mh = manhole111.features.find(x => x.properties["識別碼"] == fnum);
                                            if (mh) {
                                                const b = mh.properties["地盤高"];
                                                const h = mh.properties["孔深"];
                                                push_node(n, b, h);
                                            }
                                        }
                                    }
//                                    console.log([i,y.attributes.lon, y.attributes.lat])
                                    return [y.attributes.lon, y.attributes.lat];
                                })
                            ];
                            const q0 = f0.createQuery();
                            q0.where = "US_MH in ('" + p.node.map(x => x.MH_NUM).join("','") + "')"
                                + " OR DS_MH in ('" + p.node.map(x => x.MH_NUM).join("', '") + "')";
//                            console.log(q0.where);
                            q0.returnGeometry = false;
                            q0.outFields = ["PI_NUM", "US_MH", "DS_MH", "PipeHeight", "PipeWidth", "FacNum", "US_BLE", "DS_BLE", "StartDepth", "EndDepth"];
                            f0.queryFeatures(q0).then(presult => {
                                const mh_pipe = {};
                                for (let p of presult.features) {
                                    mh_pipe[p.attributes.US_MH] = {
                                        ...p.attributes, BLE: p.attributes.US_BLE, DEPTH: p.attributes.StartDepth
                                    };
                                    if (!mh_pipe[p.attributes.DS_MH]) {
                                        mh_pipe[p.attributes.DS_MH] = {
                                            ...p.attributes, BLE: p.attributes.DS_BLE, DEPTH: p.attributes.EndDepth
                                        };
                                    }
                                }
                                series_data[p.datafile] = { ...series_data[p.datafile] || {}, mh_pipe };
                            });

                            list.push({
                                geometry: {
                                    type: "polyline",
                                    paths,
                                },
                                attributes: {
                                    OBJECTID: ptr,
                                    pipe: p.title,
                                    key: p.datafile,
                                    fid: fid_list.join(","),
                                    mh: p.node.map(x => x.MH_NUM).join(",")
                                }
                            });
                            series_data[p.datafile] = { ...series_data[p.datafile] || {}, xAxis, series };
                        })
                    );
                }
                Promise.all(promises).then(() => {
                    const layer = arcgis_map.createFeatureLayer({
                        id: LAYER_ID + "-PROFILE",
                        source: list,
                        objectIdField: "OBJECTID",
                        fields: [{
                            name: "OBJECTID",
                            type: "oid"
                        }, {
                            name: "fid",
                            type: "string"
                        }, {
                            name: "mh",
                            type: "string"
                        }, {
                            name: "pipe",
                            type: "string"
                        }, {
                            name: "key",
                            type: "string"
                        }],
                        popupTemplate: {
                            overwriteActions: true,
                            outFields: ["*"],
                            title: "雨水下水道",
                            content: show_profile
                        },
                        renderer: {
                            type: "simple",
                            symbol: {
                                type: "simple-line",
                                width: 3,
                                color: "#C04020",
                                style: "short-dash-dot"
                            }
                        }
                    });
                    arcgis_map.map.add(layer);
                });
            });
        }
    }

    function getModelResultList() {
        var url = app.siteRoot + 'api/model/result/list';
        $.get(url).then(response => {
            $("#time-selections").empty();
            var first = true;
            for (var r of response) {
                var ele = $(`<label id='m-${r.replace('.', '-')}' onclick='showModelResult("${r}", 0)'>${r}</label>`)
                $("#time-selections").append(ele);
                if (first) {
                    showModelResult(r, 0);
                    first = false;
                }
            }
        });
    }

    function showModelResultLegend() {
        $("#water-level-legend").html("<h6>淹水深度</h6>");
        for (var s of MODEL_COLORSCALE) {
            const c = s.color;
            const v = s.value;
            $("#water-level-legend").append(`<div style='width: 50px; height: 25px; border: 0.5px solid rgba(128,128,128,0.5);'><span style='display: inline-block; height: 100%; width: 100%; background-color: ${c}; '></span><span style='font-weight: 800; display: inline-block; margin-left: 2px; position: absolute; '>${v}</span></div>`);
        }
        $("#water-level-legend").append("<h6>單位：公尺</h6>")
    }

    function toggle_modelresult(show) {
        let old_layer = arcgis_map.map.findLayerById(LAYER_ID + '-OUTPUT');
        if (show === true) {
            old_layer.visible = true;
        } else if (show === false) {
            old_layer.visible = false;
        } else {
            old_layer.visible = !old_layer.visible;
        }
        old_layer = arcgis_map.map.findLayerById(LAYER_ID + '-PROFILE');
        if (show === true) {
            old_layer.visible = true;
        } else if (show === false) {
            old_layer.visible = false;
        } else {
            old_layer.visible = !old_layer.visible;
        }
    }

    function showModelResult(t0, h) {
        if (!arcgis_map.createFeatureLayer) {
            console.log('Waiting for arcgis ready');
            setTimeout(function () { showModelResult(t0, h); }, 1000);
        } else {
            if (t0) {
                last_t0 = t0;
                var qpesum_time = `${t0.substring(0, 4)}-${t0.substring(4, 6)}-${t0.substring(6, 8)}T${t0.substring(9, 11)}:${t0.substring(11, 13)}`;
                qpesum_forecast_60m(null, qpesum_time);
            }
            $("#loading").show();
            $("#model-time").text(last_t0);
            $("#time-selections label").css("background", "");
            $("#hour-selections span").css("border", "");
            $("#m-" + last_t0.replace('.', '-')).css("background", "yellow");
            $("#m-hour-" + h).css("border", "1px solid #800000");

            const old_result_layer = arcgis_map.map.findLayerById(LAYER_ID + '-OUTPUT');
            if (old_result_layer) arcgis_map.map.remove(old_result_layer);
            const result_layer = arcgis_map.createGeoJSONLayer({
                url: app.siteRoot + `api/model/result/${last_t0}/${h}`,
                id: LAYER_ID + '-OUTPUT', // url to the service
                popupTemplate: {
                    overwriteActions: true,
                    title: "淹水深度: {FIELD1} 公尺",
                    content: "ID: {ID}"
                },
                renderer: {
                    type: "simple",
                    symbol: {
                        type: "simple-fill",
                        color: [250, 250, 250, 0],
                        outline: {
                            color: [128, 128, 128, 0.05],
                            width: 0.5
                        }
                    },
                    visualVariables: [
                        {
                            type: "color",
                            field: "FIELD1",
                            stops: MODEL_COLORSCALE
                        }
                    ]
                }
            });
            arcgis_map.map.add(result_layer);
            arcgis_map.view.whenLayerView(result_layer).then(lv => {
                let check_ready = function () {
                    if (lv.updating) {
                        setTimeout(check_ready, 200);
                    } else {
                        $("#loading").hide();
                    }
                };
                check_ready();
            }).catch(function (error) {
                $("#loading").hide();
            });
        }

    }

    $(document).ready(function () {
        getProfileData();
        showModelResultLegend();
        getModelResultList();
    });
</script>
<div id="chart_popup" style="position:absolute; height: 450px; width: 60vw; left: 20vw; top: 150px;
    outline: 2px double orange; z-index: 900;
    background: rgba(250,250,250,0.9); display: none;">
    <div id="close" style="cursor: pointer; position: absolute; top: 2px; right: 5px; z-index: 1000;" onclick="hide_chart_popup()">&#x2612;</div>
    <div id="chart1" style="height: 450px; width: 100%"></div>
    <div id="play" style="cursor: pointer; position: absolute; top: 2px; right: 35px; z-index: 1000;" onclick="profile_play('btn')">&#x25b6;</div>
    <div id="stop" style="cursor: pointer; position: absolute; top: 2px; right: 35px; z-index: 1000; display:none" onclick="profile_play_stop()">&#x23f9;</div>
</div>
<div style="position: absolute; top: 70px; left: 30px; height: calc(100vh - 260px); display: flex; flex-direction: column; flex-wrap: wrap;">
    <div style="margin-bottom: 20px; margin-right: 20px; width: 200px; height: 100%; max-height: 420px; background: rgba(255,255,255,0.85); border-radius: 20px; padding: 12px; cursor: pointer">
        <h5><input type="checkbox" checked onclick="toggle_modelresult()" />淹水模擬時間：</h5>
        <h5 id="model-time"></h5>
        <hr />
        <div id="hour-selections">
            @for (var i = 0; i <= 12; i++)
            {
                <span style="padding: 1px; font-size: 12px" id="m-hour-@i" onclick="showModelResult(0, @i)">+@i</span>
                if (i == 6)
                {
                    <br />
                }
            }
        </div>
        <hr />
        <h5>其他模式時間：</h5>
        <hr />
        <div id="time-selections">
        </div>
    </div>
    <div style="width: 200px; height: 180px; background: rgba(255,255,255,0.85); border-radius: 20px; padding: 15px;">
        <h5><input type="checkbox" checked onclick="qpesums.toggle_qpesums()" />雨量資料類型：</h5>
        <h6 style="color: rgb(14 8 100); font-weight: 800;">QPESUMS一小時預報雨量</h6>
        <h5>資料時間：</h5>
        <h6 id="qpesum-datetime" style="color: rgb(14 8 100); font-weight: 800;"></h6>
    </div>
</div>