<div id="qpesum-color-legend" style="position: absolute; bottom: 65px; right: 20px; width: 100px; background-color: white; border: 3px solid rgba(255,255,255,0.4); ">
</div>
<script>
    // api/qpesums/qpf060min/time/
    const qpesums = {};
    qpesums.LAYER_ID = 'QPESUMS_LAYER_ID';
    qpesums.dou_color_scale = [
        { min: 80, max: 5000, color: "#FF0000" },
        { min: 50, max: 80, color: "#FF6363" },
        { min: 40, max: 50, color: "#FF9400" },
        { min: 30, max: 40, color: "#E7C600" },
        { min: 20, max: 30, color: "#FFFF00" },
        { min: 15, max: 20, color: "#009400" },
        { min: 10, max: 15, color: "#00AD00" },
        { min: 5, max: 10, color: "#00CE00" },
        { min: 2, max: 5, color: "#9C9C9C" },
        { min: 1, max: 2, color: "#9B6384" },
        { min: 0.0001, max: 1, color: "#63529B" },
        { min: -999, max: 0.0001, color: "#ffffff" }];
    qpesums.qplus_colorscale = [{ "value": 0, "color": "#635273" },
        { "value": 10, "color": "#736384" },
        { "value": 20, "color": "#9c9c9c" },
        { "value": 50, "color": "#00ce00" },
        { "value": 100, "color": "#00ad00" },
        { "value": 150, "color": "#009400" },
        { "value": 200, "color": "#ffff00" },
        { "value": 300, "color": "#e7c600" },
        { "value": 400, "color": "#ff9400" },
        { "value": 500, "color": "#ff6363" },
        { "value": 800, "color": "#ff0000" },
        { "value": 1000, "color": "#ce0000" },
        { "value": 1500, "color": "#ff00ff" },
        { "value": 2000, "color": "#9c31ce" },
        { "value": 2500, "color": "#ffffff" }];
    qpesums.renderer = {
        "type": "simple", "symbol": { "type": "simple-fill", "color": [250, 250, 250], "outline": { "color": [255, 128, 128, 0.1], "width": 0.5 } },
        "visualVariables": [{
            "type": "color", "field": "v",
            "stops": qpesums.qplus_colorscale
        }]
    };
    qpesums.create_grid_feature = function (ptr, lon, lat, dx, dy, v) {
        const rings = [
            [  // first ring
                [lon - dx / 2, lat - dy / 2],
                [lon - dx / 2, lat + dy / 2],
                [lon + dx / 2, lat + dy / 2],
                [lon + dx / 2, lat - dy / 2],
                [lon - dx / 2, lat - dy / 2],
            ]];
        const f = {
            geometry: {
                type: "polygon",
                rings,
            },
            attributes: {
                OBJECTID: ptr,
                v,
                lon,
                lat
            }
        };
        return f;
    }
    qpesums.toggle_qpesums = function (show) {
        const old_layer = arcgis_map.map.findLayerById(qpesums.LAYER_ID);
        if (!old_layer) return;
        if (show === true) {
            old_layer.visible = true;
        } else if (show === false) {
            old_layer.visible = false;
        } else {
            old_layer.visible = !old_layer.visible;
        }
    }
    qpesums.update_qpesums_layer = function (list, popupMsg) {
        $("#qpesum-color-legend").html("<h6>雨量</h6>");
        for (var s of qpesums.renderer.visualVariables[0].stops) {
            const c = s.color;
            const v = s.value;
            $("#qpesum-color-legend").append(`<div style='width: 50px; height: 25px; border: 0.5px solid rgba(128,128,128,0.5);'><span style='display: inline-block; height: 100%; width: 100%; background-color: ${c}; opacity: 0.5;'></span><span style='font-weight: 800; display: inline-block; margin-left: 2px; position: absolute; '>${v}</span></div>`);
        }
        $("#qpesum-color-legend").append("<h6>單位：mm</h6>")
        const old_layer = arcgis_map.map.findLayerById(qpesums.LAYER_ID);
        const layer = arcgis_map.createFeatureLayer({
            id: qpesums.LAYER_ID,
            source: list,  // array of graphics objects
            objectIdField: "OBJECTID",
            fields: [{
                name: "OBJECTID",
                type: "oid"
            }, {
                name: "v",
                type: "double"
            }, {
                name: "lat",
                type: "double"
            },
            {
                name: "lon",
                type: "double"
            }],
            popupTemplate: {
                overwriteActions: true,
                title: popupMsg,
                content: "座標: {lon},{lat}"
            },
            opacity: 0.5,
            renderer: qpesums.renderer
        });
        if (old_layer) arcgis_map.map.remove(old_layer);
        arcgis_map.map.add(layer, 0);
    }
    
    function manysplendid_csv_data(t0,h) {
        $("#loading").show();
        const data_url = `${app.siteRoot}api/model/input/grid_rain/${t0}/${h}`;
        $.get(data_url).then(data => {
            const content = data.split("\n");
            let ptr = 0;
            const list = [];
            for (var r of content) {
                ptr++;
                const parts = r.split(',');
                const f = qpesums.create_grid_feature(ptr, parts[0] * 1.0, parts[1]* 1.0, 0.0125, 0.0125, parts[2] * 1.0);
                list.push(f);                 
            }
            qpesums.update_qpesums_layer(list, "1小時預報雨量: {v} mm");
            $("#qpesum-datetime").text(t0);
            $("#loading").hide();
        }).fail(()=>$("#loading").hide());
    }
    function parse_opendata_json(data) {
        const list = [];
        const meta = data.cwaopendata.dataset.datasetInfo;
        const param = meta.parameterSet;
        const nx = param.GridDimensionX * 1;
        const ny = param.GridDimensionY * 1;
        const x0 = param.StartPointLongitude * 1.0;
        const y0 = param.StartPointLatitude * 1.0;
        const dx = param.GridResolution * 1.0;
        const dy = param.GridResolution * 1.0;

        let ptr = 0;
        let idx = 0;
        let skip = 0;
        const content = data.cwaopendata.dataset.contents.content.split(',');
        for (let r = 0; r < ny; r++) {
            for (let c = 0; c < nx; c++) {
                const v = content[idx].trim() == '0.000E+00' ? 0 : content[idx] * 1.0;
                idx++;
                if (!(v >= 0.1)) {
                    skip++;
                    continue;
                }
                ptr++;
                const lon = x0 + c * dx;
                const lat = y0 + r * dy;
                list.push(qpesums.create_grid_feature(ptr, lon, lat, dx, dy, v));
            }
        }
        console.log("features: ", list.length, "ptr", ptr, "skip", skip);
        return list;
    }
    function qpesum_last_60m() {
        var d3_ready = (typeof d3 !== 'undefined');

        if (!arcgis_map.ready || !d3_ready) {
            console.log('Waiting for arcgis & d3 ready');
            setTimeout(qpesum_last_60m, 1000);
            return;
        }
        var url = app.siteRoot + 'api/qpesums/last60min';
        $("#loading").show();
        $.get(url).then(response => {
            const data = JSON.parse(response.Content);
            const list = parse_opendata_json(data);
            qpesums.update_qpesums_layer(list, "1小時觀測雨量: {v} mm");
            $("#qpesum-datetime").text(response.Datetime);
            $("#loading").hide();
        }).fail(() => $("#loading").hide());
    }
    function qpesum_forecast_60m(e, t) {
        var d3_ready = (typeof d3 !== 'undefined');

        if (!arcgis_map.ready || !d3_ready) {
            console.log('Waiting for arcgis & d3 ready');
            setTimeout(qpesum_forecast_60m, 1000);
            return;
        }

        var url = app.siteRoot + 'api/qpesums/qpf060min/rt';
        // Test for all value format
        // url = `/api/qpesums/qpf060min/result/202409061600`;
        if (t) {
            var dt = new Date(t);
            var ts = dt.getFullYear() * 100000000 + (dt.getMonth() + 1) * 1000000 + (dt.getDate()) * 10000 + (dt.getHours()) * 100 + dt.getMinutes();
            url = `${app.siteRoot}api/qpesums/qpf060min/result/${ts}`;
        }
        //       console.log($.AppConfigOptions.baseurl);
        $(".qpesums-selection").css('background', '').css('color', 'black');
        if (e && e.target) {
            $(e.target).css('background', 'rgba(12,55,180,0.9)').css('color', 'white');
        }
        $("#loading").show();
        $.get(url).then(response => {
            const content = response.Content.split('\n');
            const meta = content[0].split(',');
            const nx = meta[0] * 1.0;
            const ny = meta[1] * 1.0;
            const x0 = meta[3] * 1.0;
            const y0 = meta[4] * 1.0;
            const x1 = meta[5] * 1.0;
            const y1 = meta[6] * 1.0;
            const dx = (x1 - x0) / (nx - 1);
            const dy = (y1 - y0) / (ny - 1);
            console.log(nx, ny, x0, x1, dx, y0, y1, dy);

            // use constant scale, skip dynamic scale
            const scale = content[2].split(',').map(x => 1.0 * x);

            const list = [];
            if (content[3].startsWith("ndv:")) {
                // compact format
                const colIdx = content[4].split(':')[1].split(',').map(x => 1.0 * x);
                const rowPtr = content[5].split(':')[1].split(',').map(x => 1.0 * x);
                const data = content[6].split(':')[1].split(',').map(x => 1.0 * x);
                let ptr = 0;
                for (let r = 0; r < ny; r++) {
                    let r1 = rowPtr[r];
                    let r2 = rowPtr[r + 1];
                    let nv = r2 - r1;
                    if (nv) {
                        for (let n = 0; n < nv; n++) {
                            const c = colIdx[ptr];
                            const v = data[ptr];
                            const lon = x0 + c * dx;
                            const lat = y0 + r * dy;
                            ptr++;
                            list.push(qpesums.create_grid_feature(ptr, lon, lat, dx, dy, v));
                        }
                    }
                }
                console.log("features: ", list.length, "ptr", ptr);
            } else {
                // all values format
                let ptr = 0;
                let skip = 0;
                for (let r = 0; r < ny; r++) {
                    const data = content[r + 3].split(',').map(x => x * 1.0);
                    for (let c = 0; c < nx; c++) {
                        const v = data[c];
                        if (!(v >= 0.1)) {
                            skip++;
                            continue;
                        }
                        ptr++;
                        const lon = x0 + c * dx;
                        const lat = y0 + r * dy;
                        list.push(qpesums.create_grid_feature(ptr, lon, lat, dx, dy, v));
                    }
                }
                console.log("features: ", list.length, "ptr", ptr, "skip", skip);
            }

            qpesums.update_qpesums_layer(list, "1小時預報雨量: {v} mm");

            $("#qpesum-datetime").text(response.Datetime);
            $("#loading").hide()
        }).fail(() => $("#loading").hide());
    }
</script>
