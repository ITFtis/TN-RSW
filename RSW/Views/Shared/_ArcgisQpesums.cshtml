<div id="qpesum-color-legend" style="position: absolute; bottom: 65px; right: 20px;padding-top: 20px; width: 100px; background-color: white; border: 3px solid rgba(255,255,255,0.4); ">
</div>
<script>
    // api/qpesums/qpf060min/time/
    const QPESUMS_LAYER_ID = 'QPESUMS_LAYER_ID';
    function qpesum_forecast_60m(e, t) {
        var d3_ready = (typeof d3 !== 'undefined');

        if (!arcgis_map.createFeatureLayer || !d3_ready) {
            console.log('Waiting for arcgis & d3 ready');
            setTimeout(qpesum_forecast_60m, 1000);
            return;
        }

        var url = app.siteRoot + 'api/qpesums/qpf060min/rt';
        // Test for all value format
        // url = `/api/qpesums/qpf060min/result/202409061600`;
        if (t) {
            var dt = new Date(t);
            var ts = dt.getFullYear() * 100000000 + (dt.getMonth() + 1) * 1000000 + (dt.getDate()) * 10000 + (dt.getHours()) * 100 + dt.getMinutes();
            url = `${app.siteRoot}api/qpesums/qpf060min/result/${ts}`;
        }
        //       console.log($.AppConfigOptions.baseurl);
        $(".qpesums-selection").css('background', '').css('color', 'black');
        if (e && e.target) {
            $(e.target).css('background', 'rgba(12,55,180,0.9)').css('color', 'white');
        }
        $("#loading").show();
        $.get(url).then(response => {
            const content = response.Content.split('\n');
            const meta = content[0].split(',');
            const nx = meta[0] * 1.0;
            const ny = meta[1] * 1.0;
            const x0 = meta[3] * 1.0;
            const y0 = meta[4] * 1.0;
            const x1 = meta[5] * 1.0;
            const y1 = meta[6] * 1.0;
            const dx = (x1 - x0) / (nx - 1);
            const dy = (y1 - y0) / (ny - 1);
            console.log(nx, ny, x0, x1, dx, y0, y1, dy);
            const scale = content[2].split(',').map(x => 1.0 * x);
            const stops = [];
            $("#qpesum-color-legend").html("");
            for (let i = 0; i < scale.length; i += 4) {
                const c = d3.rgb(scale[i + 0], scale[i + 1], scale[i + 2]).formatHex();
                const v = scale[i + 3];
                stops.push({ value: v, color: c });
                $("#qpesum-color-legend").append(`<div style='width: 50px; height: 25px; background-color: ${c};'><span style='display: inline-block; margin-left: 55px; position: relative; transform: translateY(-50%);'>${v}</span></div>`);
            }

            const renderer = {
                type: "simple",
                symbol: {
                    type: "simple-fill",
                    color: [250, 250, 250],
                    outline: {
                        color: [255, 128, 128, 0.1],
                        width: 0.5
                    }
                },

                visualVariables: [
                    {
                        type: "color",
                        field: "v",
                        stops
                    }
                ]

            };
            const list = [];
            if (content[3].startsWith("ndv:")) {
                // compact format
                const colIdx = content[4].split(':')[1].split(',').map(x => 1.0 * x);
                const rowPtr = content[5].split(':')[1].split(',').map(x => 1.0 * x);
                const data = content[6].split(':')[1].split(',').map(x => 1.0 * x);
                let ptr = 0;
                for (let r = 0; r < ny; r++) {
                    let r1 = rowPtr[r];
                    let r2 = rowPtr[r + 1];
                    let nv = r2 - r1;
                    if (nv) {
                        for (let n = 0; n < nv; n++) {
                            const c = colIdx[ptr];
                            const v = data[ptr];
                            ptr++;
                            const lon = x0 + c * dx;
                            const lat = y0 + r * dy;
                            //                            console.log(lon, lat, v);
                            const rings = [
                                [  // first ring
                                    [lon - dx / 2, lat - dy / 2],
                                    [lon - dx / 2, lat + dy / 2],
                                    [lon + dx / 2, lat + dy / 2],
                                    [lon + dx / 2, lat - dy / 2],
                                    [lon - dx / 2, lat - dy / 2],
                                ]];
                            const f = {
                                geometry: {
                                    type: "polygon",
                                    rings,
                                },
                                attributes: {
                                    OBJECTID: ptr,
                                    v,
                                    lon,
                                    lat
                                }
                            };
                            list.push(f);
                        }
                    }
                }
                console.log("features: ", list.length, "ptr", ptr);
            } else {
                // all values format
                let ptr = 0;
                let skip = 0;
                for (let r = 0; r < ny; r++) {
                    const data = content[r + 3].split(',').map(x => x * 1.0);
                    for (let c = 0; c < nx; c++) {
                        const v = data[c];
                        if (!(v >= 0.1)) {
                            skip++;
                            continue;
                        }
                        ptr++;
                        const lon = x0 + c * dx;
                        const lat = y0 + r * dy;
                        //console.log(lon, lat, c, r, v);
                        const rings = [
                            [  // first ring
                                [lon - dx / 2, lat - dy / 2],
                                [lon - dx / 2, lat + dy / 2],
                                [lon + dx / 2, lat + dy / 2],
                                [lon + dx / 2, lat - dy / 2],
                                [lon - dx / 2, lat - dy / 2],
                            ]];
                        const f = {
                            geometry: {
                                type: "polygon",
                                rings,
                            },
                            attributes: {
                                OBJECTID: ptr,
                                v,
                                lon,
                                lat
                            }
                        };
                        list.push(f);
                    }
                }
                console.log("features: ", list.length, "ptr", ptr, "skip", skip);
            }


            const old_layer = arcgis_map.map.findLayerById(QPESUMS_LAYER_ID);
            const layer = arcgis_map.createFeatureLayer({
                id: QPESUMS_LAYER_ID,
                source: list,  // array of graphics objects
                objectIdField: "OBJECTID",
                fields: [{
                    name: "OBJECTID",
                    type: "oid"
                }, {
                    name: "v",
                    type: "double"
                }, {
                    name: "lat",
                    type: "double"
                },
                {
                    name: "lon",
                    type: "double"
                }],
                popupTemplate: {
                    overwriteActions: true,
                    title: "1小時預報雨量: {v} mm",
                    content: "座標: {lon},{lat}"
                },
                renderer
            });
            if (old_layer) arcgis_map.map.remove(old_layer);

            arcgis_map.map.add(layer, 15);

            $("#qpesum-datetime").text(response.Datetime);
            $("#loading").hide()
        }).fail(() => $("#loading").hide());
    }
</script>
